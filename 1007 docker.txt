1. 설치
	(1) 리눅스
		curl -fsSL http://get.docker.com/|sudo su
	
	(2) 윈도우
		https://docs.docker.com/docker-for-windows/install/
			- Docker for Windows : windows 10, 64bit, vmware와 병행 사용 불가
			- Docker Tool Box : window 7, windows 10 home, vmware와 병행 사용
			
		제어판 > 프로그램 제거
			> virtual box 제거
			
		https://github.com/docker/toolbox/releases
			> DockerToolbox-19.03.1.exe 다운로드

		toolbox 설치
			> Docker Compose for Windows
			> VirtualBox
			> Kitematic for Windows (Alpha)
			> Git >> 깃은 설치 안되어있는 경우만 체크
			
			
2. 특징
	- Pycon 2013 solomon kykes - 'The Future of Linux Container'
	- Go 언어로 개발
	- Immutable, Stateless, Scalable
	- Community Edition & Enterprise Edition
	- Linux Base
	- 64bit OS only
	
3. 사용법

Docker Hub 들어가서 회원가입 해두기
	
	Docker 열기
	$ docker version
		// 도커 버전 정보 띄워짐
	
	$ --version
	
	(1) 이미지 검색
		$ docker search mysql
		
		$ docker search hello-world
		
	(2) 이미지 다운로드
		$ docker pull hello-world
		
	(3) 이미지 확인
		$ docker images
		
	(4) 실행중인 컨테이너 확인
		$ docker container ps
			// 제목만 뜨고 아무것도 안뜨는게 맞음
			
	(5) 컨테이너 실행
		$ docker run -i -t --name "hello" hello-world
		
		$ docker run -it --name "hello" hello-world
		
		$ docker container ps
			// 아직 실행이 안되고 있는 것으로 뜸
			
		$ docker container ps -a
			// 실행시켰던 기록이 뜬다
			
		$ docker run -it --name "hello2" hello-world /bin/echo "yaho"
		
		$ docker run -it --name "hello3" hello-world /bin/echo "yaho"
		
		$ docker container ps -a 
			// 입력했던거 다 뜬다
			
	(6) 컨테이너 삭제
		$ docker container rm hello
		
		$ docker container ps -a 
			// 삭제 된것 볼 수 있다
		
		$ docker container prune
			// 실행중이지 않은 것 다 삭제
			
	(7) 이미지 삭제
		$ docker rmi 이미지 이름
		
-------------------------------------------------------------------
4. 실습
	(1) 우분투 사용하기
		$ docker search ubuntu
		
		$ docker run -it --name "ub" ubuntu /bin/bash
			// ub라는 이름으로 바로 실행시킬 수 있도록 지정해주는 작업
		
			# ls
			
			# cd bin
			
			# echo "hello world"
				>> hello world
				
			# exit
		
		끝내고 돌아오기
		$ docker container ps
			// 실행되고 있는게 없어서 뜨는게 없음
			
		$ docker container ps -a
			// 아까 했던 ubuntu 뜬다
			
		$ docker start ub
		
		$ docker container ps 
			// ubuntu 시작된 걸 볼 수 있다
		
		$ docker attach ub
			> 리눅스로 넘어감(접속 방법)
			
			ctrl + p, ctrl + q
			// 실행중인 상태로 빠져나올 수 있음
			
		$ docker container ps
			// ubuntu 실행중인걸 볼 수 있다
			
		$ docker exec ub /bin/echo "hello~~ world"
		
	(2) CentOS 사용하기
		$ docker search centos
		
		$ docker container run -it --name co centos bash
			// co 이름으로 bash 만들어주는 작업
		
			# cd bin
			
			# ls
				// cal 확인
				
			# cal
				// 달력 뜬다
				
			ctrl + p, ctrl + q
				// 빠져나오기
				
		$ docker container ps
			// ubuntu, centos 다 실행되고 있는거 볼 수 있다
			
	(3) Nginx 사용하기
		$ docker search nginx
		
		$ docker pull nginx
		
		$ docker container run --name webserver -d -p 80:80 nginx
			// '-d'옵션 : 계속 백그라운드에서 실행 시키고 싶으면 주는 옵션
			// '-p' : port - 80:80
			
			인터넷 창키기
			> http://192.168.99.100/ 입력
				// nginx 페이지 뜬다
				// port 번호가 80인 기본값으로 되어있어서 생략가능
				
		$ docker container run --name webserver2 -d -p 6789:80 nginx
			// port번호가 기본값이 아니라 웹페이지 접속시 생략불가
			
		$ docker container ps
			// 총 4개 돌아가고 있는걸 볼 수 있다
			
		$ docker container run -d -p 10000:80 nginx
		
		$ docker container run -d -p 10001:80 nginx
		
		$ docker container ps
			// 이름 지정안해준건 임의로 지정된 걸 볼 수 있다
	
	(4) Ubuntu 사용하기
		$ docker run --rm -it ubuntu:16.04 /bin/bash
			
			# cat /etc/issue
			
			ctrl + p, ctrl + q
			
		$ docker container ps
		
		$ docker attach e7
			> docker attach <CONTAINER ID>
			> CONTAINER ID : 앞에 두개만 쳐도 된다 (겹치는 거 없으면)
			
			# exit
			
		$ docker container ps
			// 중지하고 나와서 ubuntu(zen_agnesi) 사라짐
			
		$ docker container ps -a
			// ubuntu(zen_agnesi) 없음 
				>> 처음 설정할때 중지하고 나오면 아예 삭제하는 옵션 걸어줘서 그런것
				
		
		
5. 명령어
	(1) docker run
		-d	 	: 백그라운드
		-p		: 호스트와 컨테이너의 포트 연결(포워딩)
		-v		: 디렉토리 연결
		-e		: 환경변수 설정
		--name	: 컨테이너 이름 설정
		--rm	: 프로세스 종료 시 컨테이너를 자동 제거
		-it	 	: -i 와 -t를 통시에 사용(터미널 입출력)
		--link 	: 컨테이너 연결
		
	(2) docker stop
		$ docker ps -q
			// 현재 실행중인 프로세스의 ID만 출력
		
		$ docker stop `docker ps -q`	: 따옴표가 아니라 `
		
		$ docker container ps
			// 실행중인거 없다고 뜬다
			
	(3) docker start
		$ docker start `docker ps -aq`
		
		
		
		
		
			
		
		
		
		
		
		
		
			
			
		
			
		
			





















	